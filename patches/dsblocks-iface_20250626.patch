diff --git a/config.def.h b/config.def.h
index d502520..56b62c3 100644
--- a/config.def.h
+++ b/config.def.h
@@ -18,4 +18,5 @@ static const Block blocks[] = {
     {CmdBri, 0, 3},
     {CmdMic, 0, 4},
     {CmdSpk, 0, 5},
+    {CmdIface, 0, 1},
 };
diff --git a/dsblocks.c b/dsblocks.c
index 98b0d2e..18edaed 100644
--- a/dsblocks.c
+++ b/dsblocks.c
@@ -13,7 +13,8 @@ enum { CmdDate,
        CmdBat,
        CmdBri,
        CmdMic,
-       CmdSpk };
+       CmdSpk,
+       CmdIface };
 
 enum { BtnLeft = 1,
        BtnRight,
@@ -28,6 +29,7 @@ typedef struct {
 
 #include "config.h"
 
+#include "iface.c"
 #include "alsa.c"
 #include "bat.c"
 #include "bri.c"
@@ -150,6 +152,14 @@ void cmdspk(int i, int b)
     sprintf(sblocks[i], "%cV: MUTE%c", blocks[i].signal, blocks[i].signal);
 }
 
+void cmdiface(int i)
+{
+  char tmp[BLOCKLEN];
+
+  readiface(tmp, BLOCKLEN);
+  sprintf(sblocks[i], "%cI: %s%c", blocks[i].signal, tmp, blocks[i].signal);
+}
+
 void runcmd(int i, int b)
 {
   switch (blocks[i].cmd) {
@@ -168,6 +178,9 @@ void runcmd(int i, int b)
   case CmdSpk:
     cmdspk(i, b);
     break;
+  case CmdIface:
+    cmdiface(i);
+    break;
   }
 }
 
diff --git a/iface.c b/iface.c
new file mode 100644
index 0000000..a86cc87
--- /dev/null
+++ b/iface.c
@@ -0,0 +1,30 @@
+#include <arpa/inet.h>
+#include <ifaddrs.h>
+#include <net/if.h>
+#include <stdio.h>
+#include <string.h>
+
+void readiface(char *i, size_t is)
+{
+  struct ifaddrs *ifaddr, *ifa;
+
+  snprintf(i, is, "-");
+  if (getifaddrs(&ifaddr) == -1) {
+    perror("can't get ifaddrs");
+    return;
+  }
+
+  for (ifa = ifaddr; ifa; ifa = ifa->ifa_next) {
+    if (!ifa->ifa_addr || ifa->ifa_flags & IFF_LOOPBACK)
+      continue;
+    if (ifa->ifa_flags & IFF_UP && ifa->ifa_addr->sa_family == AF_INET) {
+      struct sockaddr_in *sa = (struct sockaddr_in *)ifa->ifa_addr;
+      char ip[INET_ADDRSTRLEN];
+      inet_ntop(AF_INET, &(sa->sin_addr), ip, INET_ADDRSTRLEN);
+      if (strcmp(ip, "0.0.0.0")) {
+        snprintf(i, is, "%s", ifa->ifa_name);
+        break;
+      }
+    }
+  }
+}
