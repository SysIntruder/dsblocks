diff --git a/config.def.h b/config.def.h
index d502520..6760a18 100644
--- a/config.def.h
+++ b/config.def.h
@@ -6,6 +6,7 @@
 #define MAX_BRIGHTNESS "/sys/class/backlight/amdgpu_bl1/max_brightness"
 #define CAPTURE "Capture"
 #define PLAYBACK "Master"
+#define NETWORK "/sys/class/net"
 #define STEP 5
 #define BLOCKLEN 25
 #define MAXLEN 2048
@@ -18,4 +19,5 @@ static const Block blocks[] = {
     {CmdBri, 0, 3},
     {CmdMic, 0, 4},
     {CmdSpk, 0, 5},
+    {CmdIface, 0, 1},
 };
diff --git a/dsblocks.c b/dsblocks.c
index 98b0d2e..18edaed 100644
--- a/dsblocks.c
+++ b/dsblocks.c
@@ -13,7 +13,8 @@ enum { CmdDate,
        CmdBat,
        CmdBri,
        CmdMic,
-       CmdSpk };
+       CmdSpk,
+       CmdIface };
 
 enum { BtnLeft = 1,
        BtnRight,
@@ -28,6 +29,7 @@ typedef struct {
 
 #include "config.h"
 
+#include "iface.c"
 #include "alsa.c"
 #include "bat.c"
 #include "bri.c"
@@ -150,6 +152,14 @@ void cmdspk(int i, int b)
     sprintf(sblocks[i], "%cV: MUTE%c", blocks[i].signal, blocks[i].signal);
 }
 
+void cmdiface(int i)
+{
+  char tmp[BLOCKLEN];
+
+  readiface(tmp, BLOCKLEN);
+  sprintf(sblocks[i], "%cI: %s%c", blocks[i].signal, tmp, blocks[i].signal);
+}
+
 void runcmd(int i, int b)
 {
   switch (blocks[i].cmd) {
@@ -168,6 +178,9 @@ void runcmd(int i, int b)
   case CmdSpk:
     cmdspk(i, b);
     break;
+  case CmdIface:
+    cmdiface(i);
+    break;
   }
 }
 
diff --git a/iface.c b/iface.c
new file mode 100644
index 0000000..2229813
--- /dev/null
+++ b/iface.c
@@ -0,0 +1,34 @@
+#include <dirent.h>
+#include <stdio.h>
+#include <string.h>
+
+void readiface(char *i, size_t is)
+{
+  DIR *dir;
+  struct dirent *entry;
+  char p[MAXLEN], s[16];
+  FILE *f;
+
+  if (!(dir = opendir(NETWORK))) {
+    perror("can't open network");
+    strncpy(i, "-", is);
+    return;
+  }
+
+  while((entry = readdir(dir))) {
+    char *iface = entry->d_name;
+    if (!strcmp(iface, ".") || !strcmp(iface, ".."))
+      continue;
+    snprintf(p, MAXLEN, NETWORK"/%s/operstate", iface);
+    if (!(f = fopen(p, "r"))) {
+      perror("can't read operstate");
+      continue;
+    }
+    fgets(s, sizeof(s), f);
+    fclose(f);
+    if (!strncmp(s, "up", 2)) {
+      strncpy(i, iface, is);
+      break;
+    }
+  }
+}
